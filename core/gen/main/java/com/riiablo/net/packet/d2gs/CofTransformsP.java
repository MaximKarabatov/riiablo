// automatically generated by the FlatBuffers compiler, do not modify

package com.riiablo.net.packet.d2gs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CofTransformsP extends Table {
  public static CofTransformsP getRootAsCofTransformsP(ByteBuffer _bb) { return getRootAsCofTransformsP(_bb, new CofTransformsP()); }
  public static CofTransformsP getRootAsCofTransformsP(ByteBuffer _bb, CofTransformsP obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public CofTransformsP __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int transform(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int transformLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer transformAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer transformInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createCofTransformsP(FlatBufferBuilder builder,
      int transformOffset) {
    builder.startObject(1);
    CofTransformsP.addTransform(builder, transformOffset);
    return CofTransformsP.endCofTransformsP(builder);
  }

  public static void startCofTransformsP(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addTransform(FlatBufferBuilder builder, int transformOffset) { builder.addOffset(0, transformOffset, 0); }
  public static int createTransformVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startTransformVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endCofTransformsP(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

