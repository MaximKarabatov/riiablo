package com.riiablo.excel;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.Generated;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import org.apache.commons.lang3.time.DateFormatUtils;

public class TableGenerator {
  static final ClassName tableName = ClassName.get(Table.class);

  static final ClassName STRING = ClassName.get("java.lang", "String");

  static String serializerName(ClassName schemaName) {
    return schemaName.simpleName() + tableName.simpleName();
  }

  final ProcessingEnvironment processingEnv;
  final Messager messager;
  final Elements elementUtils;
  final Class generatingClass;
  final String serializerPackage;

  TableGenerator(
      ProcessingEnvironment processingEnv,
      Class generatingClass,
      String serializerPackage
  ) {
    this.processingEnv = processingEnv;
    this.messager = processingEnv.getMessager();
    this.elementUtils = processingEnv.getElementUtils();
    this.generatingClass = generatingClass;
    this.serializerPackage = serializerPackage;
  }

  JavaFile generateFile(TypeElement schemaType) {
    ClassName schemaName = ClassName.get(schemaType);
    String comments = schemaName.canonicalName();
    List<FieldElement> fields = new ArrayList<>(256);

    TypeSpec.Builder tableType = newTable(schemaName, fields)
        .addAnnotation(newGenerated(comments))
        ;

    return JavaFile
        .builder(serializerPackage, tableType.build())
        .skipJavaLangImports(true)
        .addFileComment(
            "automatically generated by $L, do not modify",
            TableGenerator.class.getCanonicalName())
        .build();
  }

  AnnotationSpec newGenerated(String comments) {
    return AnnotationSpec
        .builder(Generated.class)
        .addMember("value", "$S", generatingClass.getCanonicalName())
        .addMember("date", "$S", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(new Date()))
        .addMember("comments", "$S", comments)
        .build();
  }

  TypeSpec.Builder newTable(ClassName schemaName, List<FieldElement> fields) {
    return TypeSpec
        .classBuilder(serializerName(schemaName))
        .superclass(ParameterizedTypeName.get(tableName, schemaName))
        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
        ;
  }
}
